
#import "VulnerabilityMap.h"
#import "Globals.h"

@interface VulnerabilityMap ()

@property (nonatomic, weak) TensionMap *   tensionMap;
@property (nonatomic, weak) InfluenceMap * influenceMap;

@end


@implementation VulnerabilityMap


- (id) initWithTension:(TensionMap *)tension influence:(InfluenceMap *)influence {
    if ( ( self = [super init] ) ) {
        self.title = @"Vulnerability";
        _tensionMap = tension;
        _influenceMap = influence;
	}
    
	return self;
}


- (void) update {
    [self clear];

    int w = self.width;

    for ( int y = 0; y < self.height; ++y ) {
        for ( int x = 0; x < self.width; ++x ) {
            int index = y * w + x;
            float tension = [self.tensionMap getValue:x y:y];
            float influence = [self.influenceMap getValue:x y:y];

            // the sum of the values
            float sum = tension - fabs( influence );

            // save
            data[ index ] = sum;

            // new min or max?
            self.max = max( self.max, sum );
            self.min = min( self.min, sum );
        }
    }

    CCLOG( @"max: %f, min: %f", self.max, self.min );

    int color1, color2;

    // set up the colors
    for ( int y = 0; y < self.height; ++y ) {
        for ( int x = 0; x < self.width; ++x ) {
            int dataIndex = y * self.width + x;
            int textureIndex = y * self.textureWidth + x;
            float value = data[ dataIndex ];

            if ( value < 0 ) {
                color1 = (int)(value / self.min * 255.0f);
                color2 = (int)(value / self.min * 100.0f);
                colors[ textureIndex ] = ccc4( color1, color1, color2, 255 );
            }
            else {
                color1 = (int)(value / self.max * 255.0f);
                color2 = (int)(value / self.max * 100.0f);
                colors[ textureIndex ] = ccc4( color2, color1, color1, 255 );
            }
        }
    }
}

@end
